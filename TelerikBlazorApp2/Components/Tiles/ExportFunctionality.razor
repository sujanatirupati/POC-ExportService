@using TelerikBlazorApp2.Services
@using System.Data
@inject IJSRuntime JSRuntime
@using Microsoft.Win32
@using ExportService;

<div align="right">
    <TelerikButton Icon ="more-vertical"   OnClick="@(() => DrawerRef.ToggleAsync())"    />
    <TelerikDrawer @bind-Expanded ="@Expanded"
                                                 Data="@Data"
                                                 Mode="@DrawerMode.Push"
                                  SelectedItemChanged="((DrawerItem item) => SelectedItemChangedHandler(item))"
                                                 @ref="@DrawerRef" Position="DrawerPosition.Right">
        <ItemTemplate Context ="item">
            <div>@item.Text</div>
            </ItemTemplate>   
            </TelerikDrawer>
</div>

<TelerikGrid Data="@GridData"
             @ref="grid"
             Pageable="true"
             Sortable="true"
             Reorderable="true">
    <GridColumns>
        <GridColumn Id="ID" Field="@nameof(SampleData.Id)" Title="Product Id" Width="100px" />
        <GridColumn Id="ProductName" Field="@nameof(SampleData.ProductName)" Title="Product Name" Width="300px" />
        <GridColumn Id="UnitsInStock" Field="@nameof(SampleData.Units)" Title="Units in Stock" Width="100px" />
        <GridColumn Id="Price" Field="@nameof(SampleData.Price)" Title="Unit Price" Width="200px" />
        <GridColumn Id="Discontinued" Field="@nameof(SampleData.Discontinued)" Title="Discontinued" Width="100px" />
        <GridColumn Id="FirstReleaseDate" Field="@nameof(SampleData.ReleaseDate)" Title="Release Date" Width="300px" />
    </GridColumns>
</TelerikGrid>

@code {

    TelerikGrid<SampleData> grid { get; set; }

    public TelerikDrawer<DrawerItem> DrawerRef { get; set; }
    public DrawerItem SelectedItem { get; set; }
    public string SelectedItemText { get; set; }
    public bool Expanded { get; set; } = false;
    public IEnumerable<DrawerItem> Data { get; set; } = new List<DrawerItem>
                                                                {
                                                    new DrawerItem { ID = 1, Text = "Print"},
                                                    new DrawerItem { ID = 2, Text = "Export as PDF"},
                                                    new DrawerItem { ID = 3, Text = "Export as EXcel Document"}
                                                    };

    public class DrawerItem
    {
        public int ID { get; set; }
        public string Text { get; set; }
    }

    public async void SelectedItemChangedHandler(DrawerItem item)
    {
        SelectedItem = item;
        int id = SelectedItem.ID;

        switch (id)
        {
            case 2: { PdfExportItemClicked(); } break;
            case 3: { ExcelExportItemClicked(); } break;
            case 1:
                {
                    string noteContent1 = "Sample Text";
                    string fileName1 = "note1.txt";
                    await JSRuntime.InvokeAsync<object>(
                                      "FileSaveAs",
                                      fileName1,
                                      noteContent1
                                  );
                }
                break;
        }
    }

    string noteContent = "Sample Text";
    string fileName = "note.txt";

    public async void DownloadFile()
    {
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            fileName,
            noteContent
        );
    }

    List<SampleData> GridData { get; set; }
    bool ExportAllPages { get; set; }
    //ExportService srv = new ExportService();

    Dictionary<string, string> dicColumnHeaders = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        var list1 = Enumerable.Range(1, 3).Select(x => new SampleData
        {
            Id = x,
            ProductName = $"Product   {x}",
            Units = x * 2,
            Price = 3.14159m * x,
            Discontinued = x % 4 == 0,
            ReleaseDate = DateTime.Now.AddDays(-x)
        }).ToList();

        var list2 = Enumerable.Range(4, 6).Select(x => new SampleData
        {
            Id = x,
            ProductName = $"Product  is in stock  {x}",
            Units = x * 2,
            Price = 3.14159m * x,
            Discontinued = x % 4 == 0,
            ReleaseDate = DateTime.Now.AddDays(-x)
        }).ToList();

        var list3 = Enumerable.Range(7, 10).Select(x => new SampleData
        {
            Id = x,
            ProductName = $"Products out of stock {x}",
            Units = x * 2,
            Price = 3.14159m * x,
            Discontinued = x % 4 == 0,
            ReleaseDate = DateTime.Now.AddDays(-x)
        }).ToList();

        GridData = new List<SampleData>();
        GridData.AddRange(list1);
        GridData.AddRange(list2);
        GridData.AddRange(list3);

        dicColumnHeaders.Add("Id", "Product Id");
        dicColumnHeaders.Add("ProductName", "Product Name");
        dicColumnHeaders.Add("Units", "Units in Stock");
        dicColumnHeaders.Add("Price", "Price");
        dicColumnHeaders.Add("Discontinued", "Discontinued");
        dicColumnHeaders.Add("ReleaseDate", "Product Release Date");
    }

    public async void ExcelExportItemClicked()
    {
        TelerikGridData<SampleData> gridData = new TelerikGridData<SampleData>();
        gridData.grid = grid;
        gridData.dicColumnHeaders = dicColumnHeaders;

        var pdfExporter = new Exporter();
        byte[] fileData = null;

        fileData = await pdfExporter.ExportWithExcelProcessing1(gridData);

        string base64File = Convert.ToBase64String(fileData);

        await JSRuntime.InvokeVoidAsync("saveFile", base64File, "application/xlsx", "TelerikGridExport.xlsx");
    }

    public async void PdfExportItemClicked()
    {

        TelerikGridData<SampleData> gridData = new TelerikGridData<SampleData>();
        gridData.grid = grid;
        gridData.dicColumnHeaders = dicColumnHeaders;

        var pdfExporter = new Exporter();
        byte[] fileData = null;

        fileData = await pdfExporter.ExportWithPdfProcessing(gridData);

        string base64File = Convert.ToBase64String(fileData);

        await JSRuntime.InvokeVoidAsync("saveFile", base64File, "application/pdf", "TelerikGridExport.pdf");

        // This is working code
        //var pdfExporter = new Exporter();
        //byte[] fileData = null;

        //fileData = await pdfExporter.ExportWithPdfProcessing(GridData);

        //string base64File = Convert.ToBase64String(fileData);

        //await JSRuntime.InvokeVoidAsync("saveFile", base64File, "application/pdf", "TelerikGridExport.pdf");
    }

    public class SampleData
    {
        public int Id { get; set; }
        public string ProductName { get; set; }
        public int Units { get; set; }
        public decimal Price { get; set; }
        public bool Discontinued { get; set; }
        public DateTime ReleaseDate { get; set; }
    }
}
